#version 460

// ------------- layout ------------- 

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba8) uniform image2D targetImage[8];

struct Sphere {
  vec3 center;
  float radius;
  uint materialType;
  uint materialIndex;
};

struct Lambertian {
  vec3 colorAlbedo;
};

struct Metal {
  vec3 colorAlbedo;
  float fuzziness;
};

struct Dielectric {
  float indexOfRefraction;
};

layout(set = 0, binding = 1) uniform GlobalUbo {
  vec3 origin;
  vec3 horizontal;
  vec3 vertical;
  vec3 lowerLeftCorner;
} ubo;

layout(set = 0, binding = 2) buffer ObjectUbo {
  Sphere spheres[50];
  Metal metals[10];
  Lambertian lambertians[10];
  Dielectric dielectrics[10];
  uint numObj;
} objects;

layout(push_constant) uniform Push {
  uint randomSeed;
} push;

// ------------- pre-defined parameter -------------

float pi = 3.14159265359;

// ------------- struct ------------- 

struct Ray {
  vec3 origin;
  vec3 direction;
};

struct FaceNormal {
  bool frontFace;
  vec3 normal;
};

struct MaterialHitRecord {
  uint materialType;
  uint materialIndex;
};

struct HitRecord {
  bool isHit;
  float t;
  vec3 point;
  FaceNormal faceNormal;
  MaterialHitRecord materialHit;
};

struct ScatterRecord {
  bool isScattered;
  vec3 colorAttenuation;
  Ray raySpecular;
};

// ------------- function ------------- 

// Random number generation using pcg32i_random_t, using inc = 1. Our random state is a uint.
uint stepRNG(uint rngState) {
  return rngState * 747796405 + 1;
}

// Steps the RNG and returns a floating-point value between 0 and 1 inclusive.
float stepAndOutputRNGFloat(inout uint rngState) {
  // Condensed version of pcg_output_rxs_m_xs_32_32, with simple conversion to floating-point [0,1].
  rngState  = stepRNG(rngState);
  uint word = ((rngState >> ((rngState >> 28) + 4)) ^ rngState) * 277803737;
  word      = (word >> 22) ^ word;
  return float(word) / 4294967295.0;
}

uint rngStateXY =  (600 * gl_GlobalInvocationID.x + gl_GlobalInvocationID.y) * (push.randomSeed + 1);
uint rngStateXZ =  (600 * gl_GlobalInvocationID.x + gl_GlobalInvocationID.z) * (push.randomSeed + 1);
uint rngStateYZ =  (600 * gl_GlobalInvocationID.y + gl_GlobalInvocationID.z) * (push.randomSeed + 1);

float randomFloat(uint index) {
  float randNum = 0.0;

  switch(index) {
    case 0: randNum = stepAndOutputRNGFloat(rngStateXY); break;
    case 1: randNum = stepAndOutputRNGFloat(rngStateXZ); break;
    case 2: randNum = stepAndOutputRNGFloat(rngStateYZ); break;
  }

  return randNum;
}

float randomFloatAt(float min, float max, uint index) {
  return min + (max - min) * randomFloat(index);
}

vec3 randomVecThree(uint index) {
  return vec3(randomFloat(index), randomFloat(index), randomFloat(index));
}

vec3 randomVecThreeAt(float min, float max, uint index) {
  return vec3(randomFloatAt(min, max, index), randomFloatAt(min, max, index), randomFloatAt(min, max, index));
}

vec3 randomInUnitSphere(uint index) {
  while (true) {
    vec3 p = randomVecThreeAt(-1.0, 1.0, index);

    if (dot(p, p) < 1) {
      return p;
    }
  }
}

vec3 randomInHemisphere(vec3 normal, uint index) {
  vec3 in_unit_sphere = randomInUnitSphere(index);

  // In the same hemisphere as the normal
  if (dot(in_unit_sphere, normal) > 0.0) {
    return in_unit_sphere;
  } else {
    return -in_unit_sphere;
  }   
}

vec3 randomInUnitDisk(uint index) {
  while (true) {
    vec3 p = vec3(randomFloatAt(-1.0, 1.0, index), randomFloatAt(-1.0, 1.0, index), 0.0);

    if (dot(p, p) < 1) {
      return p;
    }
  }
}

bool nearZero(vec3 xyz) {
  // Return true if the vector is close to zero in all dimensions.
  float s = 1e-8;
  return (abs(xyz.x) < s) && (abs(xyz.y) < s) && (abs(xyz.z) < s);
}

float reflectance(float cosine, float refIdx) {
  // Use Schlick's approximation for reflectance.
  float r0 = (1 - refIdx) / (1 + refIdx);
  r0 = r0 * r0;
  return r0 + (1 - r0) * pow((1 - cosine), 5);
}

vec3 rayAt(Ray r, float t) {
  return r.origin + t * r.direction;
}

FaceNormal setFaceNormal(Ray r, vec3 outwardNormal) {
  FaceNormal faceNormal;

  faceNormal.frontFace = dot(r.direction, outwardNormal) < 0.0;
  faceNormal.normal = faceNormal.frontFace ? outwardNormal : -outwardNormal;

  return faceNormal;
}

HitRecord hitSphere(Sphere obj, Ray r, float tMin, float tMax) {
  FaceNormal faceNormal;
  faceNormal.frontFace = false;
  faceNormal.normal = vec3(0, 0, 0);

  HitRecord rec;
  rec.isHit = false;
  rec.t = 0.0;
  rec.point = vec3(0, 0, 0);
  rec.faceNormal = faceNormal;

  vec3 oc = r.origin - obj.center;

  float a = dot(r.direction, r.direction);
  float half_b = dot(oc, r.direction);
  float c = dot(oc, oc) - obj.radius * obj.radius;

  float discriminant = half_b * half_b - a * c;

  if (discriminant < 0.0) {
    return rec;
  }

  float sqrtd = sqrt(discriminant);

  // Find the nearest root that lies in the acceptable range.
  float root = (-half_b - sqrtd) / a;
  if (root < tMin || tMax < root) {
    root = (-half_b + sqrtd) / a;
    if (root < tMin || tMax < root) {
      return rec;
    }
  }

  rec.isHit = true;
  rec.t = root;
  rec.point = rayAt(r, rec.t);

  vec3 outwardNormal = (rec.point - obj.center) / obj.radius;
  rec.faceNormal = setFaceNormal(r, outwardNormal);

  rec.materialHit.materialType = obj.materialType;
  rec.materialHit.materialIndex = obj.materialIndex;

  return rec;
}

HitRecord hitSphereList(Sphere objList[50], int objNum, Ray r, float tMin, float tMax) {
  FaceNormal faceNormal;
  faceNormal.frontFace = false;
  faceNormal.normal = vec3(0, 0, 0);
  
  HitRecord rec;
  rec.isHit = false;
  rec.point = vec3(0, 0, 0);
  rec.faceNormal = faceNormal;

  rec.t = tMax;
  for (int i = 0; i < objNum; i++) {
    HitRecord tempRec = hitSphere(objList[i], r, tMin, rec.t);
    if (tempRec.isHit) {
      rec = tempRec;
    }
  }

  return rec;
}

ScatterRecord scatterLambertian(Ray r, HitRecord hit) {
  ScatterRecord scat;

  vec3 scatterDirection = hit.faceNormal.normal + normalize(randomInUnitSphere(0));
  if (nearZero(scatterDirection)) {
    scatterDirection = hit.faceNormal.normal;
  }

  scat.raySpecular.origin = hit.point;
  scat.raySpecular.direction = scatterDirection;

  scat.isScattered = true;
  scat.colorAttenuation = objects.lambertians[hit.materialHit.materialIndex].colorAlbedo;

  return scat;
}

ScatterRecord scatterMetal(Ray r, HitRecord hit) {
  ScatterRecord scat;

  vec3 reflected = reflect(normalize(r.direction), hit.faceNormal.normal);

  float fuzziness = objects.metals[hit.materialHit.materialIndex].fuzziness;
  fuzziness = fuzziness < 1.0 ? fuzziness : 1.0;

  scat.raySpecular.origin = hit.point;
  scat.raySpecular.direction = reflected + fuzziness * randomInUnitSphere(0);

  scat.isScattered = dot(reflected, hit.faceNormal.normal) > 0.0;
  scat.colorAttenuation = objects.metals[hit.materialHit.materialIndex].colorAlbedo;

  return scat;
}

ScatterRecord scatterDielectric(Ray r, HitRecord hit) {
  ScatterRecord scat;

  float indexOfRefraction = objects.dielectrics[hit.materialHit.materialIndex].indexOfRefraction;
  float refractionRatio = hit.faceNormal.frontFace ? (1.0 / indexOfRefraction) : indexOfRefraction;

  vec3 unitDirection = normalize(r.direction);
  float cosTheta = min(dot(-unitDirection, hit.faceNormal.normal), 1.0);
  float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

  bool cannotRefract = refractionRatio * sinTheta > 1.0;
  vec3 direction;

  if (cannotRefract || reflectance(cosTheta, refractionRatio) > randomFloat(0)) {
    direction = reflect(unitDirection, hit.faceNormal.normal);
  } else {
    direction = refract(unitDirection, hit.faceNormal.normal, refractionRatio);
  }

  scat.raySpecular.origin = hit.point;
  scat.raySpecular.direction = direction;

  scat.isScattered = true;
  scat.colorAttenuation = vec3(1.0, 1.0, 1.0);

  return scat;
}

vec3 rayColor(Ray r) {
  Ray curRay = r;
  vec3 curAttenuation = vec3(1.0, 1.0, 1.0);
  
  for(int i = 0; i < 50; i++) {
    HitRecord hit = hitSphereList(objects.spheres, 4, curRay, 0.001, 10000.0);

    if (hit.isHit) {
      ScatterRecord scat;

      if (hit.materialHit.materialType == 0) {
        scat = scatterLambertian(curRay, hit);
      } else if (hit.materialHit.materialType == 1) {
        scat = scatterMetal(curRay, hit);
      } else if (hit.materialHit.materialType == 2) {
        scat = scatterDielectric(curRay, hit);
      }

      if (scat.isScattered) {
        curAttenuation *= scat.colorAttenuation;
        curRay = scat.raySpecular;
      } else {
        return vec3(0.0, 0.0, 0.0);
      }
    } else {
      vec3 unit_direction = normalize(curRay.direction);
      float t = 0.5 * (unit_direction.y + 1.0);
      vec3 c = (1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0);

      return curAttenuation * c;
    }
  }

  return vec3(0.0, 0.0, 0.0); // exceeded recursion
}

void main() {
  uint imgIndex = gl_GlobalInvocationID.z;
  uvec2 imgPosition = gl_GlobalInvocationID.xy;

  vec2 imgSize = vec2(imageSize(targetImage[imgIndex]));

  float noiseX = randomFloat(1);
  float noiseY = randomFloat(2);

  vec2 noiseUV = vec2(noiseX, noiseY);
  vec2 uv = (imgPosition + noiseUV) / imgSize;

  Ray r;
  r.origin = ubo.origin;
  r.direction = ubo.lowerLeftCorner + uv.x * ubo.horizontal - uv.y * ubo.vertical - ubo.origin;
  
  vec4 curColor = vec4(rayColor(r), 1.0);
  imageStore(targetImage[imgIndex], ivec2(imgPosition), curColor);
}